приходилось решать распределенные транзакции на проектах
спроектировать распределенную транзакцию
межсервисной взаимодействие
монолит vs микросервисы, плюсы и минусы
организация кода в монолите с прицелом на разделение на микросервисы
бд и микросервисы
есть асинхронный источний и синхронный фронт, как подружить
service discovery
недостатки микросервисной архитектуры
выбор базы данных для приложения
есть много update, есть медленный легаси-сервис. придумать систему уменьшения нагрузки
cap-теорема и порождаемые ей выводы
о себе в контексте архитектурных решений и высоконагруженных систем
способ ограничения нагрузки на сервис
распределенные транзакции, сага
способы взаимодействия микросервисов, способы через rest
spring cloud, spring discovery
опыт с оркестраторами, что делали
с чего начнете пилить монолит на микросервисы
реализовать паттерн bff, будет ли у него база данных
опыт проектирования архитектуры
опыт разработки архитектуры
балансирование нагрузки
опыт выбора стека
последний проект, его архитектура, почему распределенный монолит
опыт с микросервисами
12-факторные приложения
микросервисные паттерны
распределенные транзакции, способы, сага
оркестрация vs хореография
какие были асинхронные взаимодействия между микросервисами
спроектировать долгоработающее апи
как балансировать нагрузку с websockets?
как перебалансировать юзеров между сервисами?
спроектировать чат на 30к человек (типа twitch)
распределенные транзакции
system design задачка с websockets + message brocker
путь запроса от браузера до контроллера
плюсы и минусы микросервисов
паттерны и подходы микросервисов
circuit breaker
работа с пиковыми нагрузками
способы балансировки нагрузки
распределенные транзакции, сага
способы взаимодействия между микросервисами
опыт решения архитектурных проблем
плюсы и минусы микросервисов
идеальная архитектура для kotlin + spring, желаемые правила
монолит vs микросервисы (с провокацией и осознанностью, на подумать)
архитектуры построения обработки данных (лямбда ...)
батчинг (что-то про лямбда архитектуру)
как пользователи будут видеть результат стриминга (?)
подходы проектирования data warehouse
cdc и сортировка при микросервисах
что дает транзакция
sort + pageable при межсервисном взаимодействии
spring cloud, netflix stack?
авторизация vs аутентификация
oauth 2.0
public key и private key
logs, metrics, tracing
в чем преимущество event driven
почему возникла необходимость в появлении очередей
распределенный процесс в микросервисной архитектуре
temporal (bpmn система)
паттерн сага
